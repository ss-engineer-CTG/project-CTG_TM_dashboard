"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[282],{3282:function(e,t,n){n.d(t,{g:function(){return l},h:function(){return u}});var r=n(7437),o=n(2265),c=n(344),a=n(4108),i=n(619);let s=(0,o.createContext)(void 0),l=e=>{let{children:t}=e,[n,l]=(0,o.useState)({connected:!1,loading:!0,message:"API接続確認中...",lastChecked:null}),[u,d]=(0,o.useState)(0),{addNotification:f}=(0,a.l)(),w=(0,o.useCallback)(async function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;if(!i.C5)return!1;l(e=>({...e,loading:!0})),e>0&&await new Promise(t=>setTimeout(t,e));try{let e=await (0,c.ce)();return l({connected:e.success,loading:!1,message:e.message,lastChecked:new Date,details:e.details}),e.success?(u>0&&f("バックエンドサーバーへの接続が回復しました","success"),d(0)):(d(e=>e+1),f(e.message,"error")),e.success}catch(e){return console.error("API接続確認エラー:",e),l({connected:!1,loading:!1,message:"API接続エラー: ".concat(e.message),lastChecked:new Date}),d(e=>e+1),f("APIサーバーへの接続に失敗しました","error"),!1}},[f,u]);return(0,o.useEffect)(()=>{let e=!0;if(!i.C5)return;let t=async()=>{if(await w(),e){let t=setInterval(()=>{w()},3e5);return()=>{clearInterval(t),e=!1}}};return t(),()=>{e=!1}},[w]),(0,r.jsx)(s.Provider,{value:{status:n,reconnectAttempts:u,checkConnection:w},children:t})},u=()=>{let e=(0,o.useContext)(s);if(void 0===e)throw Error("useApi must be used within an ApiProvider");return e}},4108:function(e,t,n){n.d(t,{J:function(){return i},l:function(){return s}});var r=n(7437),o=n(2265),c=n(1872);let a=(0,o.createContext)(void 0),i=e=>{let{children:t}=e,[n,i]=(0,o.useState)([]),s=(0,o.useRef)({}),l=(0,o.useCallback)(function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"info",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:3e3,r=(0,c.Z)();i(o=>[...o,{id:r,message:e,type:t,duration:n}]),n>0&&(s.current[r]=setTimeout(()=>{u(r),delete s.current[r]},n))},[]),u=(0,o.useCallback)(e=>{i(t=>t.filter(t=>t.id!==e)),s.current[e]&&(clearTimeout(s.current[e]),delete s.current[e])},[]);return(0,r.jsx)(a.Provider,{value:{notifications:n,addNotification:l,removeNotification:u},children:t})},s=()=>{let e=(0,o.useContext)(a);if(void 0===e)throw Error("useNotification must be used within a NotificationProvider");return e}},1923:function(e,t,n){},344:function(e,t,n){n.d(t,{ce:function(){return i},qN:function(){return l}});var r=n(1923),o=n(619);let c=async()=>{if(!o.C5)return null;if(console.log("APIポート自動検出を開始"),(0,o.yv)())try{let e=await window.electron.getApiBaseUrl();if(e){let t=new URL(e),n=parseInt(t.port,10);if(!isNaN(n)&&await a(n))return console.log("Electronから検出したポート: ".concat(n)),n}}catch(e){console.warn("Electronからのポート検出エラー:",e)}try{let e=localStorage.getItem("api_port");if(e){let t=parseInt(e,10);if(!isNaN(t)&&await a(t))return console.log("以前保存されたポートを使用: ".concat(t)),t}}catch(e){console.warn("ローカルストレージからの読み取りエラー:",e)}let e=[8e3,8080,8888,8081,8001,3001,5e3];for(let t of(console.log("候補ポートを順次チェック: ".concat(e.join(", "))),e))if(console.log("ポート ".concat(t," をチェック中...")),await a(t)){console.log("アクティブなAPIポートを検出: ".concat(t));try{localStorage.setItem("api_port",t.toString())}catch(e){console.warn("ポート情報のローカルストレージ保存に失敗:",e)}return t}return console.error("アクティブなAPIポートが見つかりませんでした"),null},a=async e=>{if(!o.C5)return!1;try{let t=new AbortController,n=setTimeout(()=>t.abort(),2e3),r=await fetch("http://127.0.0.1:".concat(e,"/api/health"),{method:"HEAD",headers:{Accept:"application/json"},signal:t.signal});return clearTimeout(n),r.status>=200&&r.status<300}catch(e){return!1}},i=async function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:2;if(!o.C5)return{success:!1,message:"クライアント側でのみ使用可能な機能です"};console.log("API接続テスト開始 (最大試行回数: ".concat(e,")"));let t=await c();if(!t)return{success:!1,message:"バックエンドサーバーに接続できません。サーバーが起動しているか確認してください。",details:{error:"No active API port detected",attemptsMade:1}};try{r.apiClient.setBaseUrl("http://127.0.0.1:".concat(t,"/api")),(0,o.XQ)(t);let e=await r.apiClient.get("/health");return(0,o.d5)(!0),{success:!0,message:"APIサーバーに接続しました (ポート: ".concat(t,")"),port:t,details:e}}catch(e){return console.warn("ポート ".concat(t," は検出されましたが、健全性チェックに失敗しました:"),e),{success:!0,message:"APIサーバーを検出しました (ポート: ".concat(t,")"),port:t,details:{warning:"健全性チェックに失敗しましたが、APIは検出されました",error:e.message}}}},s=null,l=async()=>!!o.C5&&(s||(s=new Promise(async e=>{try{if((0,o.DA)()){e(!0);return}let t=await i();(0,o.d5)(t.success),e(t.success)}catch(t){console.error("API初期化エラー:",t),(0,o.d5)(!1),e(!1)}})),s)},619:function(e,t,n){n.d(t,{C5:function(){return r},DA:function(){return a},XQ:function(){return s},d5:function(){return i},yv:function(){return o}});let r=!0,o=()=>{if(!r)return!1;let e=r&&void 0!==window.electron&&null!==window.electron;return console.log("isElectronEnvironment 検出結果:",e,{isClient:r,windowDefined:!0,electronDefined:void 0!==window.electron,electronProperties:window.electron?Object.keys(window.electron):[]}),e},c=!1,a=()=>!!r&&(c||!!window.apiInitialized),i=e=>{c=e,r&&(window.apiInitialized=e)},s=e=>{r&&(window.currentApiPort=e)}}}]);